package br.lassal.dbvcs.tatubola.relationaldb.serializer;

import br.lassal.dbvcs.tatubola.fs.InMemoryTestDBModelFS;
import br.lassal.dbvcs.tatubola.relationaldb.model.Routine;
import br.lassal.dbvcs.tatubola.relationaldb.model.RoutineDummyBuilder;
import br.lassal.dbvcs.tatubola.relationaldb.model.RoutineParameter;
import br.lassal.dbvcs.tatubola.text.SqlNormalizer;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.junit.MockitoJUnitRunner;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import static org.mockito.Mockito.*;

@RunWith(MockitoJUnitRunner.class)
public class RoutineSerializerTest extends BaseSerializerTest{

    /**
     * Test if the RoutineSerializer is able to
     *  - assemble routines from separated parts: routine definitions + routine parameters
     *  - tidy up the fields and sort them in the proper order
     *  - serialize its content to DBModelFS
     *
     * @throws Exception
     */
    @Test
    public void testRoutineSerialization() throws Exception {
        String env = "DEV";
        String schema = "AAA";
        InMemoryTestDBModelFS dbModelFS = this.createNewDBModelFS();
        SqlNormalizer sqlNormalizer = SqlNormalizer.getInstance(this.repository);
        RoutineDummyBuilder routineBuilder = new RoutineDummyBuilder();

        RoutineSerializer serializer = new RoutineSerializer(this.repository, dbModelFS, schema, env);

        List<Routine> sourceRoutines = new ArrayList<>();
        sourceRoutines.add(routineBuilder.createProcedure(schema, "RoutineAA", 1));
        sourceRoutines.add(routineBuilder.createFunction(schema, "FunctionBB", 2));
        sourceRoutines.add(routineBuilder.createProcedure(schema, "RoutineCC", 3));


        when(this.repository.loadRoutineDefinition(schema)).thenReturn(this.extractRoutineDefinitionOnly(sourceRoutines));
        when(this.repository.loadRoutineParameters(schema)).thenReturn(this.extractRoutinesParameters(sourceRoutines));

        serializer.serialize();

        for(Routine originalRoutine: sourceRoutines){
            InMemoryTestDBModelFS.SerializationInfo serializationInfo = dbModelFS.getSerializationInfo(originalRoutine);
            Routine serializedRoutine = (Routine) serializationInfo.getDBObject();

            //organize the same formatting for the source definition before check equality
            originalRoutine.setRoutineDefinition(sqlNormalizer.formatSql(originalRoutine.getRoutineDefinition()));

            assertEquals(originalRoutine, serializedRoutine);

            int previousParamOrder = -1;
            for(RoutineParameter param : serializedRoutine.getParameters()){
                assertTrue(param.getOrdinalPosition() > previousParamOrder);
                previousParamOrder = param.getOrdinalPosition();
            }
        }

        verify(this.repository, times(1)).loadRoutineDefinition(schema);
        verify(this.repository, times(1)).loadRoutineParameters(schema);

        assertEquals(sourceRoutines.size(), dbModelFS.getNumberSerializedObjects());
    }

    /**
     * Test if the output generated by the RoutineSerializer can be deserialized and it
     * has the same properties than the serialized version
     *
     * @throws Exception
     */
    @Test
    public void testSerializeDeserializeRoutine() throws Exception {
        String env = "DEV";
        String schema = "AAA";
        InMemoryTestDBModelFS dbModelFS = this.createNewDBModelFS();
        SqlNormalizer sqlNormalizer = SqlNormalizer.getInstance(this.repository);
        RoutineDummyBuilder routineBuilder = new RoutineDummyBuilder();

        RoutineSerializer serializer = new RoutineSerializer(this.repository, dbModelFS, schema, env);

        List<Routine> sourceRoutines = new ArrayList<>();
        sourceRoutines.add(routineBuilder.createFunction(schema, "Function_ZZ", 1));

        when(this.repository.loadRoutineDefinition(schema)).thenReturn(this.extractRoutineDefinitionOnly(sourceRoutines));
        when(this.repository.loadRoutineParameters(schema)).thenReturn(this.extractRoutinesParameters(sourceRoutines));

        serializer.serialize();

        Routine sourceRoutine = sourceRoutines.get(0);
        InMemoryTestDBModelFS.SerializationInfo serializationInfo = dbModelFS.getSerializationInfo(sourceRoutine);


        sourceRoutine.setRoutineDefinition(sqlNormalizer.formatSql(sourceRoutine.getRoutineDefinition()));
        assertEquals(sourceRoutine, serializationInfo.getDBObject());

        Routine deserializedRoutine = textSerializer.fromYAMLtoPOJO(serializationInfo.getYamlText(), Routine.class);

        assertEquals(sourceRoutine, deserializedRoutine);
    }


    /**
     * From a a list of routines extract only the routine basic properties without the routine parameters
     * @param sourceRoutines
     * @return
     * @throws CloneNotSupportedException
     */
    private List<Routine> extractRoutineDefinitionOnly(List<Routine> sourceRoutines) throws CloneNotSupportedException {
        List<Routine> routinesDefs = new ArrayList<>();

        for(Routine original : sourceRoutines){
            Routine copy = new Routine(original.getSchema(), original.getName(), original.getRoutineType());
            copy.setReturnParamater(original.getReturnParamater());
            copy.setRoutineDefinition(original.getRoutineDefinition());

            routinesDefs.add(copy);
        }

        Collections.shuffle(routinesDefs);

        return routinesDefs;
    }

    /**
     * Extract only the routine parameters from a list of routines.
     * All parameters are shuffled before return to allow the serializer order it
     * @param sourceRoutines
     * @return
     */
    private List<RoutineParameter> extractRoutinesParameters(List<Routine> sourceRoutines) {
        List<RoutineParameter> parameters = new ArrayList<>();

        for(Routine sourceRoutine: sourceRoutines){
            parameters.addAll(sourceRoutine.getParameters());
        }
        Collections.shuffle(parameters);

        return parameters;
    }


}